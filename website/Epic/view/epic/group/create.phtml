<?
$item = $this->item;
$title = $item['id'] ? 'Edit Group' : 'Create Group';
$title = $this->_($title);
$method = $item['id'] ? 'put' : 'post';
$this->headTitle($title, 'SET');

if($this->form){
	$form = $this->form;
} else {
    if($item['id']) {
        $form = new Epic\Form\GroupEditForm();
        $form->setAction($this->uri('/groups/edit/'));

    } else {
        $form = new Epic\Form\GroupCreateForm();
        $form->setAction($this->uri('/groups/create/'));
    }
}
$form->useSubFormGroup()
     ->setMethod($item['id'] ? 'put' : 'post')
     ->setView($this)
     ->bind($item)
     ->prepare();

?>

<div class="container">
    <div class="normal-page">
        <div class="body grid-s5m0">

            <div class="main-wrap"><div id="main" class="main">
                    <div class="page-main">
                        <div class="row">
                            <div class="span6">
                                <div class="page-main-header">
                                    <span class="pull-right">
                                        <a href="<?=$this->uri('/groups/list/')?>" class="btn btn-small btn-gray"><i class="icon-search"></i> Find a Group</a>
                                        <a href="<?=$this->uri('/groups/create/')?>" class="btn btn-small btn-orange"><i class="icon-plus"></i> Start a Group</a>
                                    </span>
                                    <h3><?=$this->_($title)?>  <?if($item['id']):?><a href="<?=$this->uri('/group/' . $item['groupKey'])?>" class="">[View]</a><?endif?></h3>
                                </div>
                                <div class="blog-list vlist">
                                    <form <?=$this->formAttr($form)?> class="form group-create-form">
                                        <?=$form->restful();?>
                                        <?=$form->helper('id');?>

                                        <fieldset class="">
                                            <div class="control-group <?=$form->isError('groupName') ? 'error' : '';?>">
                                                <?=$form->helper('groupName', 'label', array('class' => 'control-label'))?>
                                                <div class="controls docs-input-sizes">
                                                    <?=$form->helper('groupName', array('class' => 'span6'))?>
                                                    <div class="help-block"><?=$form->helper('groupName', 'formElementErrors')?></div>
                                                </div>
                                            </div>
                                            
                                            <div class="control-group <?=$form->isError('summary') ? 'error' : '';?> hide">
                                                <?=$form->helper('summary', 'label', array('class' => 'control-label'))?>
                                                <div class="controls">
                                                    <?=$form->helper('summary', array('class' => 'span3'))?>        
                                                    <div class="help-block"><?=$form->helper('summary', 'formElementErrors')?></div>
                                                </div>
                                            </div> 
                                        
                                            <div class="control-group <?=$form->isError('memberEnable') ? 'error' : '';?> hide">
                                                <?=$form->helper('memberEnable', 'label', array('class' => 'control-label'))?>
                                                <div class="controls">
                                                    <?=$form->helper('memberEnable', 'formSelect', array('class' => ''))?>        
                                                    <div class="help-block"><?=$form->helper('memberEnable', 'formElementErrors')?></div>
                                                </div>
                                            </div>                   
                                            
                                            <div class="control-group <?=$form->isError('groupKey') ? 'error' : '';?> hide">
                                                <?=$form->helper('groupKey', 'label', array('class' => 'control-label'))?>
                                                <div class="controls">
                                                    <?=$form->helper('groupKey', array('class' => ''))?>        
                                                    <div class="help-block"><?=$form->helper('groupKey', 'formElementErrors')?></div>
                                                </div>
                                            </div> 

                                            <div class="control-group <?=$form->isError('memberLimit') ? 'error' : '';?>">
                                                <?=$form->helper('memberLimit', 'label', array('class' => 'control-label'))?>
                                                <div class="controls">
                                                    <?=$form->helper('memberLimit', array('class' => ''))?>        
                                                    <div class="help-block"><?=$form->helper('memberLimit', 'formElementErrors')?></div>
                                                    <div class="help-block">Set to 0 will be no limit</div>
                                                </div>
                                            </div>
                                        
                                            <div class="control-group">
                                                <label>Group Theme Photo</label>
                                                <?if($item['File']):?>
                                                    <img id="post-image" src="<?=$this->thumb($item['File'][0]['Thumb'], array('h_250'))?>" alt="" />
                                                <?endif?>
                                                <div class="row">
                                                    <div class="span4">
                                                        <?=$this->widget('File', 'file/upload')?>
                                                    </div>
                                                </div>
                                            </div>  
                                            
                                            <div class="control-group">
                                                <label>Group Categories</label>
                                                <div class="controls">
                                                    <?foreach($form->get('CategoryGroup') as $subForm):?>
                                                    <?$cate = $subForm->getCategory();if(!$cate){continue;}?>
                                                    <label class="checkbox inline">
                                                        <?=$subForm->helper('category_id', 'formCheckbox', array(
                                                            'class' => '',
                                                            'checkedValue' => $cate['id'],
                                                            'checked' => $subForm->get('group_id')->getValue() ? true : false
                                                        ))?>
                                                        <?=$cate['categoryName']?>
                                                    </label>
                                                    <?endforeach?>
                                                </div>
                                            </div>
                                            <div class="control-group <?=$form->isError(array('Text', 'content')) ? 'error' : '';?>">
                                                <div id="editor-left" class="controls">
                                                    <?=$form->helper(array('Text', 'content'), 'formTextarea', array('class' => 'span6 editor-html simple', 'rows' => '15',))?>
                                                </div>
                                                <div id="editor-right" class="markdown-preview"></div>
                                                <div class="help-block"><?=$form->helper(array('Text', 'content'), 'formElementErrors')?></div>
                                            </div>

                                            <?if($this->hasModule('File')):?>
                                                <?=$form->helper(array('GroupFile', 'file_id'), 'formHidden')?>
                                            <?endif?>
                                        </fieldset>

                                        <div class="form-actions">
                                            <button type="submit" class="btn btn-info btn-large"><?=$this->_('Publish');?></button>
                                        </div>
                                    </form>
                                </div><!--main form end-->

                            </div><!--page main left end-->
                            <div class="span3">
                                <div class="page-extra">
                                    <?=$this->widget('Epic', 'widgets/userextra', $this->vars())?>
                                </div>
                            </div><!--page main right end-->
                        </div>

                    </div><!--page-main end-->
            </div></div><!-- #main end-->

            <div class="sidebar">
                <div class="page-side">
                    <?=$this->widget('Epic', 'widgets/userside', $this->vars())?>
                </div>
            </div><!--sider end-->

        </div><!-- #body end-->
    </div><!-- normal end-->
</div><!--container end-->

<script>
eva.ready(function(){
    var form = $(".group-create-form");
    var uploader = $('#singlefileupload');
    uploader.bind('fileuploaddone', function (e, data) {
            var file = data.result[0];
            form.find('input[name="GroupFile[file_id]"]').val(file.id);
    });

    eva.loadcss(eva.s(['/lib/js/jquery/jquery.timepicker/jquery.timepicker.css', '/lib/js/bootstrap/datepicker/datepicker.css']));
    eva.loader(eva.s(['/lib/js/jquery/jquery.timepicker/jquery.timepicker.js', "/lib/js/bootstrap/datepicker/bootstrap-datepicker.js"]), function(){
        var dateFormat = 'Y-m-d';
        var timeFormat = 'g:ia';
        $('.datepair input.date').each(function(){
            var $this = $(this);
            $this.datepicker({
                    'dateFormat': dateFormat,
                    'autoclose': true
            });

            if ($this.hasClass('start') || $this.hasClass('end')) {
                $this.on('changeDate change', doDatepair);
            }

        });

        $(".datepair input.date.start").on('change', function(){
                if($(".datepair input.date.end").val() == ''){
                        $(".datepair input.date.end").val($(".datepair input.date.start").val());
                }
        });

        $('.datepair input.time').each(function() {
            var $this = $(this);
            var opts = { 'showDuration': true, 'timeFormat': timeFormat, 'scrollDefaultNow': true };

            if ($this.hasClass('start') || $this.hasClass('end')) {
                opts.onSelect = doDatepair;
            }

            $this.timepicker(opts);
        });

        $('.datepair').each(initDatepair);

        function initDatepair()
        {
            var container = $(this);

            var startDateInput = container.find('input.start.date');
            var endDateInput = container.find('input.end.date');
            var dateDelta = 0;

            if (startDateInput.length && endDateInput.length) {
                var startDate = new Date(startDateInput.val());
                var endDate =  new Date(endDateInput.val());

                dateDelta = endDate.getTime() - startDate.getTime();

                container.data('dateDelta', dateDelta);
            }

            var startTimeInput = container.find('input.start.time');
            var endTimeInput = container.find('input.end.time');

            if (startTimeInput.length && endTimeInput.length) {
                var startInt = startTimeInput.timepicker('getSecondsFromMidnight');
                var endInt = endTimeInput.timepicker('getSecondsFromMidnight');

                container.data('timeDelta', endInt - startInt);

                if (dateDelta < 86400000) {
                    endTimeInput.timepicker('option', 'minTime', startInt);
                }
            }
        }

        function doDatepair()
        {
            var target = $(this);
            if (target.val() == '') {
                return;
            }

            var container = target.closest('.datepair');

            if (target.hasClass('date')) {
                updateDatePair(target, container);

            } else if (target.hasClass('time')) {
                updateTimePair(target, container);
            }
        }

        function updateDatePair(target, container)
        {
            var start = container.find('input.start.date');
            var end = container.find('input.end.date');

            if (!start.length || !end.length) {
                return;
            }

            var startDate = new Date(start.val());
            var endDate =  new Date(end.val());

            var oldDelta = container.data('dateDelta');

            if (oldDelta && target.hasClass('start')) {
                var newEnd = new Date(startDate.getTime()+oldDelta);
                end.val(newEnd.format(dateFormat));
                end.datepicker('update');
                return;

            } else {
                var newDelta = endDate.getTime() - startDate.getTime();

                if (newDelta < 0) {
                    newDelta = 0;

                    if (target.hasClass('start')) {
                        end.val(startDate.format(dateFormat));
                        end.datepicker('update');
                    } else if (target.hasClass('end')) {
                        start.val(endDate.format(dateFormat));
                        start.datepicker('update');
                    }
                }

                if (newDelta < 86400000) {
                    var startTimeVal = container.find('input.start.time').val();

                    if (startTimeVal) {
                        container.find('input.end.time').timepicker('option', {'minTime': startTimeVal});
                    }
                } else {
                    container.find('input.end.time').timepicker('option', {'minTime': null});
                }

                container.data('dateDelta', newDelta);
            }
        }

        function updateTimePair(target, container)
        {
            var start = container.find('input.start.time');
            var end = container.find('input.end.time');

            if (!start.length || !end.length) {
                return;
            }

            var startInt = start.timepicker('getSecondsFromMidnight');
            var endInt = end.timepicker('getSecondsFromMidnight');

            var oldDelta = container.data('timeDelta');
            var dateDelta = container.data('dateDelta');

            if (target.hasClass('start') && (!dateDelta || dateDelta < 86400000)) {
                end.timepicker('option', 'minTime', startInt);
            }

            var endDateAdvance = 0;
            var newDelta;

            if (oldDelta && target.hasClass('start')) {
                // lock the duration and advance the end time

                var newEnd = (startInt+oldDelta)%86400;

                if (newEnd < 0) {
                    newEnd += 86400;
                }

                end.timepicker('setTime', newEnd);
                newDelta = newEnd - startInt;
            } else if (startInt !== null && endInt !== null) {
                newDelta = endInt - startInt;
            } else {
                return;
            }

            container.data('timeDelta', newDelta);

            if (newDelta < 0 && (!oldDelta || oldDelta > 0)) {
                // overnight time span. advance the end date 1 day
                var endDateAdvance = 86400000;

            } else if (newDelta > 0 && oldDelta < 0) {
                // switching from overnight to same-day time span. decrease the end date 1 day
                var endDateAdvance = -86400000;
            }

            var startInput = container.find('.start.date');
            var endInput = container.find('.end.date');

            if (startInput.val() && !endInput.val()) {
                endInput.val(startInput.val());
                endInput.datepicker('update');
                dateDelta = 0;
                container.data('dateDelta', 0);
            }

            if (endDateAdvance != 0) {
                if (dateDelta || dateDelta === 0) {
                    var endDate =  new Date(endInput.val());
                    var newEnd = new Date(endDate.getTime() + endDateAdvance);
                    endInput.val(newEnd.format(dateFormat));
                    endInput.datepicker('update');
                    container.data('dateDelta', dateDelta + endDateAdvance);
                }
            }
        }
	});
});
Date.prototype.format=function(format){var returnStr='';var replace=Date.replaceChars;for(var i=0;i<format.length;i++){var curChar=format.charAt(i);if(replace[curChar]){returnStr+=replace[curChar].call(this);}else{returnStr+=curChar;}}return returnStr;};Date.replaceChars={shortMonths:['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'],longMonths:['January','February','March','April','May','June','July','August','September','October','November','December'],shortDays:['Sun','Mon','Tue','Wed','Thu','Fri','Sat'],longDays:['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'],d:function(){return(this.getDate()<10?'0':'')+this.getDate();},D:function(){return Date.replaceChars.shortDays[this.getDay()];},j:function(){return this.getDate();},l:function(){return Date.replaceChars.longDays[this.getDay()];},N:function(){return this.getDay()+1;},S:function(){return(this.getDate()%10==1&&this.getDate()!=11?'st':(this.getDate()%10==2&&this.getDate()!=12?'nd':(this.getDate()%10==3&&this.getDate()!=13?'rd':'th')));},w:function(){return this.getDay();},z:function(){return"Not Yet Supported";},W:function(){return"Not Yet Supported";},F:function(){return Date.replaceChars.longMonths[this.getMonth()];},m:function(){return(this.getMonth()<9?'0':'')+(this.getMonth()+1);},M:function(){return Date.replaceChars.shortMonths[this.getMonth()];},n:function(){return this.getMonth()+1;},t:function(){return"Not Yet Supported";},L:function(){return(((this.getFullYear()%4==0)&&(this.getFullYear()%100!=0))||(this.getFullYear()%400==0))?'1':'0';},o:function(){return"Not Supported";},Y:function(){return this.getFullYear();},y:function(){return(''+this.getFullYear()).substr(2);},a:function(){return this.getHours()<12?'am':'pm';},A:function(){return this.getHours()<12?'AM':'PM';},B:function(){return"Not Yet Supported";},g:function(){return this.getHours()%12||12;},G:function(){return this.getHours();},h:function(){return((this.getHours()%12||12)<10?'0':'')+(this.getHours()%12||12);},H:function(){return(this.getHours()<10?'0':'')+this.getHours();},i:function(){return(this.getMinutes()<10?'0':'')+this.getMinutes();},s:function(){return(this.getSeconds()<10?'0':'')+this.getSeconds();},e:function(){return"Not Yet Supported";},I:function(){return"Not Supported";},O:function(){return(-this.getTimezoneOffset()<0?'-':'+')+(Math.abs(this.getTimezoneOffset()/60)<10?'0':'')+(Math.abs(this.getTimezoneOffset()/60))+'00';},P:function(){return(-this.getTimezoneOffset()<0?'-':'+')+(Math.abs(this.getTimezoneOffset()/60)<10?'0':'')+(Math.abs(this.getTimezoneOffset()/60))+':'+(Math.abs(this.getTimezoneOffset()%60)<10?'0':'')+(Math.abs(this.getTimezoneOffset()%60));},T:function(){var m=this.getMonth();this.setMonth(0);var result=this.toTimeString().replace(/^.+ \(?([^\)]+)\)?$/,'$1');this.setMonth(m);return result;},Z:function(){return-this.getTimezoneOffset()*60;},c:function(){return this.format("Y-m-d")+"T"+this.format("H:i:sP");},r:function(){return this.toString();},U:function(){return this.getTime()/1000;}};
</script>
